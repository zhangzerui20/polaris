name: Standalone

on:
  workflow_dispatch:
    inputs:
      server_version:
        description: 'tag version for polaris'
        required: true
      console_version:
        description: 'tag version for polaris-console'
        required: true

jobs:
  release:
    name: Release polaris standalone
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin, kubernetes]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
          - goos: linux
            goarch: arm64
          - goos: kubernetes
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.server_version }}

      - name: Build
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          SERVER_VERSION: ${{ github.event.inputs.server_version }}
          CONSOLE_VERSION: ${{ github.event.inputs.console_version }}
        run: |
          if [ ${GOOS} == "kubernetes" ];then
            set -e
            cd standalone
            DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.${GOOS}
            mkdir ${DIR_NAME}
            pushd ${DIR_NAME}
            cp ../installk8s/* ./
            popd
          else
            set -e
            cd standalone
            POLARIS_GIT_PATH=https://github.com/zhangzerui20
            DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.${GOOS}.${GOARCH}
            mkdir ${DIR_NAME}
            pushd ${DIR_NAME}
            SERVER_PKG_NAME=polaris-server-release_${SERVER_VERSION}.${GOOS}.${GOARCH}.zip
            wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris/releases/download/${SERVER_VERSION}/${SERVER_PKG_NAME} --no-check-certificate
            CONSOLE_PKG_NAME=polaris-console-release_${CONSOLE_VERSION}.${GOOS}.${GOARCH}.zip
            wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris-console/releases/download/${CONSOLE_VERSION}/${CONSOLE_PKG_NAME} --no-check-certificate
            if [ ${GOOS} == "windows" ];then
            wget -T10 -t3 https://github.com/prometheus/prometheus/releases/download/v2.28.0/prometheus-2.28.0.${GOOS}-${GOARCH}.zip
            wget -T10 -t3 https://github.com/prometheus/pushgateway/releases/download/v1.4.1/pushgateway-1.4.1.${GOOS}-${GOARCH}.zip
            mv ../installvm/install-windows.bat ./install.bat
            mv ../installvm/install-windows.ps1 ./install-windows.ps1
            mv ../installvm/uninstall-windows.bat ./uninstall.bat
            mv ../installvm/uninstall-windows.ps1 ./uninstall-windows.ps1
            else
            wget -T10 -t3 https://github.com/prometheus/prometheus/releases/download/v2.28.0/prometheus-2.28.0.${GOOS}-${GOARCH}.tar.gz
            wget -T10 -t3 https://github.com/prometheus/pushgateway/releases/download/v1.4.1/pushgateway-1.4.1.${GOOS}-${GOARCH}.tar.gz
            mv ../installvm/install-${GOOS}.sh ./install.sh
            mv ../installvm/uninstall-${GOOS}.sh ./uninstall.sh
            fi
            popd
          fi
          PACKAGE_NAME=${DIR_NAME}.zip
          zip -r ${PACKAGE_NAME} ${DIR_NAME}
          mv ${PACKAGE_NAME} ../
          echo ::set-output name=name::${PACKAGE_NAME}


      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.server_version }}

      - name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ steps.build.outputs.name }}
          asset_name: ${{ steps.build.outputs.name }}
          asset_content_type: application/gzip
